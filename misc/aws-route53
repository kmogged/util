#!/usr/bin/python

## 2015-04-05 : tkooda : simple script to interact with AWS's Route53 DNS service

## TODO:
##  - check (and WARN) for existing conflicting record before commiting any changes (e.g. subdomain already has a matching record; or WARN: dest_host/ip is already used)


from __future__ import print_function
import os
import sys
import argparse
import re

os.environ[ "BOTO_CONFIG" ] = os.path.expanduser( "~/.aws/config" )

#import boto.route53
import boto

import pprint
pp = pprint.PrettyPrinter( indent=4 )


def debug( level, *objs ):
    try:
        if level <= int( os.getenv( "DEBUG" ) ):
            print( "DEBUG(%d):" % level, objs, file=sys.stderr )
            sys.stderr.flush()
    except:
        pass


def create_google_mx( args, conn, zone_name ):
    debug( 1, "create_google_mx():", zone_name )
        
    changes = boto.route53.record.ResourceRecordSets( connection = conn,
                                                      hosted_zone_id = zone_id )
    change = changes.add_change( "CREATE", zone_name, "MX", ttl=args[ "ttl" ] )
    for mx in [ "1 aspmx.l.google.com",
                "5 alt1.aspmx.l.google.com",
                "5 alt2.aspmx.l.google.com",
                "10 aspmx2.googlemail.com",
                "10 aspmx3.googlemail.com" ]:
        change.add_value( mx )
    result = changes.commit()
    print( result, file=sys.stderr )
    sys.exit( 0 )


RR_TYPES = [ "A", "AAAA", "CNAME", "MX", "PTR", "SPF", "SRV", "TXT", "NS" ] # removed SOA capability

# parse args..
parser = argparse.ArgumentParser( description='Use boto to communicate with AWS Route53.' )
parser.add_argument( '--profile', required=True, action='store', help='profile to use from ~/.aws/config' )
#parser.add_argument( '--dry-run', default=False, action='store_true', help="Don't actually do anything" )

parser.add_argument( '--list-zones', default=False, action='store_true', help="List all hosted zones" )
parser.add_argument( '--create-zone', default=False, action='store_true', help="Create a new hosted zone" ) # specify zone_name with --zone
parser.add_argument( '--create-google-mx', default=False, action='store_true', help="Create google MX records" ) # specify zone_name with --zone
parser.add_argument( '--comment', default="", action='store', help="Specify comment" )
parser.add_argument( '--zone', action='store', help="Specify hosted zone by name" )
parser.add_argument( '--type', action='store', choices=RR_TYPES, help="Specify resource record type" )
parser.add_argument( '--ttl', action='store', type=int, default=3600, help="Specify resource record TTL" )

parser.add_argument( '--add', action='store', nargs=2, help="Add a new resource record" )
parser.add_argument( '--delete', action='store', nargs=2, help="Delete an existing resource record" )

#parser.add_argument( '--include', action='append', help='BACKUP: includes (after excludes; imples --exclude "**" )')
#parser.add_argument( 'dir_to_backup', action='store', nargs='+' )
args = vars( parser.parse_args() )
debug( 0, "ARGS:", args )


if args.get( "add" ) and args.get( "delete" ):
    print( "ERROR: cannot Add and Delete at the same time", file=sys.stderr )
    sys.exit( 2 )


conn = boto.connect_route53( profile_name = args["profile"] )

if args[ "list_zones" ]:
    for zone in conn.get_all_hosted_zones()[ "ListHostedZonesResponse" ][ "HostedZones" ]:
        print( zone[ "Name" ] )
    sys.exit( 0 )

elif args[ "zone" ]:
    zone_name = args[ "zone" ].rstrip( "." ) + "." # force trailing period
    if args.get( "create_zone" ):
        if conn.get_hosted_zone_by_name( zone_name ):
            print( "ERROR: hosted zone already exists:", zone_name, file=sys.stderr )
            sys.exit( 3 )
        
        debug( 1, "create_zone:", zone_name )
        zone_dict = conn.create_hosted_zone( zone_name, comment = args.get( "comment" ) )
        for ns in zone_dict[ "CreateHostedZoneResponse" ][ "DelegationSet" ][ "NameServers" ]:
            print( "%s\tNS\t%s" % ( zone_name, ns ) )
        
        if args.get( "create_google_mx" ):
            create_google_mx( args, conn, zone_name )
        
        sys.exit( 0 )
    else:
        try:
            zone_id = conn.get_hosted_zone_by_name( zone_name )[ "GetHostedZoneResponse" ][ "HostedZone" ][ "Id" ].split( "/" )[2]
        except TypeError:
            print( "ERROR: non-existant zone:", zone_name, file=sys.stderr )
            sys.exit( 2 )
    
    
    if args.get( "create_google_mx" ):
        create_google_mx( args, conn, zone_name )
    
    if args.get( "add" ):
        if not args[ "type" ]:
            print( "ERROR: must specify record type", file=sys.stderr )
            sys.exit( 2 )
        
        if args[ "type" ] == "NS":
            print( "ERROR: let AWS create record type", file=sys.stderr )
            sys.exit( 2 )
        
        host = args[ "add" ][ 0 ].strip( "." ) + "."
        dest = args[ "add" ][ 1 ]
        
        if not host.endswith( zone_name ):
            host = host + "." + zone_name
        
        if args[ "type" ] in [ "A", "PTR", "" ]:
            if not re.match( "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$", dest ):
                print( "ERROR: invalid IP address: '%s'" % dest, file=sys.stderr )
                sys.exit( 2 )
        
        if args[ "type" ] == "TXT":
            dest = '"' + dest + '"' # TXT records require surrounding double-quotes on AWS route53
        
        debug( 1, "add:", host, args[ "type" ], dest, args[ "ttl" ] )
        
        changes = boto.route53.record.ResourceRecordSets( connection = conn,
                                                          hosted_zone_id = zone_id )
        change = changes.add_change( "CREATE", host, args[ "type" ], ttl=args[ "ttl" ] )
        change.add_value( dest )
        result = changes.commit()
        print( result, file=sys.stderr )
        
        
    elif args.get( "delete" ):
        if not args[ "type" ]:
            print( "ERROR: must specify record type", file=sys.stderr )
            sys.exit( 2 )
        
        host = args[ "delete" ][ 0 ].strip( "." ) + "."
        dest = args[ "delete" ][ 1 ]
        
        if not host.endswith( zone_name ):
            host = host + "." + zone_name
        
        if args[ "type" ] in [ "A", "PTR", "" ]:
            if not re.match( "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$", dest ):
                print( "ERROR: invalid IP address: '%s'" % dest, file=sys.stderr )
                sys.exit( 2 )
        
        debug( 1, "delete:", host, args[ "type" ], dest, args[ "ttl" ] )
        
        changes = boto.route53.record.ResourceRecordSets( connection = conn,
                                                          hosted_zone_id = zone_id )
        
        
        
        print( "WARNING:  IS THIS UNIQUE ENOUGH FOR MULTIPLE A-RECORDS???", file=sys.stderr )
        
        
        
        change = changes.add_change( "DELETE", host, args[ "type" ], ttl = args[ "ttl" ], comment = args[ "comment" ] )
        change.add_value( dest )
        result = changes.commit()
        print( result, file=sys.stderr )
        
        
    else: # just filter output based on type
        for rr_set in conn.get_all_rrsets( zone_id ):
            if rr_set.type in [ "SOA" ]:
                continue
            if args[ "type" ] and rr_set.type != args[ "type" ]:
                continue
            for rr in rr_set.resource_records:
                print( "%s\t%s\t%s\t%s" % ( rr_set.name, rr_set.type, rr, rr_set.ttl ) )
        
        
