#!/usr/bin/python

## tkooda : 2007-07-31 : read cidr(s) from stdin, print ip(s) on stdout

import sys
import re


def inet_aton( ipv4_str ):
    ipv4_tup = ipv4_str.split( "." )
    ipv4_num = (   int( ipv4_tup[0] ) << 24 ) \
               + ( int( ipv4_tup[1] ) << 16 ) \
               + ( int( ipv4_tup[2] ) <<  8 ) \
               + ( int( ipv4_tup[3] ) )
    return ipv4_num


def inet_ntoa( ipv4_num ):
    return "%d.%d.%d.%d" \
           % ( ( ipv4_num & 0xFF000000 ) >> 24,
               ( ipv4_num & 0x00FF0000 ) >> 16,
               ( ipv4_num & 0x0000FF00 ) >>  8,
               ( ipv4_num & 0x000000FF ) )


# main()
if len(sys.argv) > 3:
    print >>sys.stderr, "usage: %s [-u] [-s] < cidrs.txt > ips.txt" \
          % sys.argv[ 0 ]
    sys.exit( 1 )

var_unique = False
var_sort = False
for arg in sys.argv[1:]:
    if arg.count( "u" ):
        var_unique = True
    if arg.count( "s" ):
        var_sort = True

ips = []
pattern_cidr = re.compile( "^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(/(\d{1,2}|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}))?$" )

for line in sys.stdin:
    result = re.match( pattern_cidr, line )
    if not result:
        print >>sys.stderr, "WARNING: ignoring invalid line: " + line ,
        continue
    ipv4_str = result.group( 1 )
    cidr_str = result.group( 3 )
    ipv4_num = inet_aton( ipv4_str )
    if not cidr_str:
        if var_unique:
            if not ipv4_num in ips:
                ips.append( ipv4_num )
        elif var_sort:
            ips.append( ipv4_num )
        else:
            print ipv4_str
        continue
    if cidr_str.count( "." ):
        cidr_mask = inet_aton( cidr_str )
    else:
        cidr_num = int( cidr_str )
        if cidr_num < 2 or cidr_num > 32:
            print >>sys.stderr, "WARNING: ignoring invalid line: " + line ,
            continue
        cidr_mask = ( 0xFFFFFFFF >> ( 32 - cidr_num ) ) << ( 32 - cidr_num )
    ipv4_num_low  = ( ipv4_num & cidr_mask )
    ipv4_num_high = ipv4_num_low | ( cidr_mask ^ 0xFFFFFFFF )
    
    for ipv4_num in range( ipv4_num_low, ipv4_num_high + 1 ):
        if var_unique:
            if not ipv4_num in ips:
                ips.append( ipv4_num )
        elif var_sort:
            ips.append( ipv4_num )
        else:
            print inet_ntoa( ipv4_num )

if var_unique or var_sort:
    if var_sort:
        ips.sort()
    for ip in ips:
        print inet_ntoa( ip )

