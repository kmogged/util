#!/usr/bin/python

## google-drive-upload-file : v0.01 : monitor local file with inotify and upload to google when it changes locally (blindly overwrite copy on drive)


## Thor J. Kooda


## USAGE:
##  google-drive-upload-file jdoe@gmail.com /path/to/local/file


## REQUIRED:
##  - sudo pip install PyDrive


## NOTES:
##  - caches json state files in ~/.cache/pydrive_state_*
##  - stores json config files in ~/.config/pydrive_*
##  - https://pypi.python.org/pypi/PyDrive
##  - http://pythonhosted.org/PyDrive/oauth.html
##
##  - can only currently upload to the root directory


## TODO:
##  - 
##  - 
##  - 
##  - 




import os
import sys
from pydrive.auth import GoogleAuth # sudo pip install PyDrive
from pydrive.drive import GoogleDrive
#import json
#from pydrive.files import FileNotDownloadableError


def do_debug( level, *args ):
    try:
        if level <= int( os.getenv( "DEBUG" ) ):
            print >>sys.stderr, "DEBUG: (%d): %s" % ( level, args )
    except:
        pass


def print_docs():
    print """
ERROR: missing client secrets file, please follow these steps to create an OAuth2 API key:

  1) Login to the Google Developers Console:  https://console.developers.google.com/
  2) Create or select a project.
  3) In the sidebar on the left, select "APIs & auth".
  4) In the displayed list of APIs, find the "Drive API" and set its status to "ON".
  5) In the sidebar on the left, select "Credentials".
  6) Click the "Create new Client ID" button.
  7) Select "Installed application" for the "APPLICATION TYPE" and "Other" for the "INSTALLED APPLICATION TYPE" and click the "Create Client ID" button.
  8) Click the "Download JSON" button for the new "Client ID" and save the client secrets JSON file as:
       %s

""" % path_pydrive_client_secrets_file
    sys.exit( 9 )



def write_file( path_file, data ):
    tmp = path_file + ".tmp"
    num = 0
    try:
        fd = os.open( tmp, os.O_CREAT | os.O_WRONLY | os.O_TRUNC, 0644 )
        num = os.write( fd, data )
        os.close( fd )
        os.rename( tmp, path_file )
    except:
        if DEBUG:
            import traceback
            traceback.print_exc( file=sys.stderr )
            sys.stderr.flush()
            pass
    return num


def safe_filename( filename ):
    ## TODO FIXME: allow lots more non-slash characters (whatever google allows)
    keepcharacters = ( ' ', '.', '_', '(', ')', '{', '}', '[', ']', '-' )
    return "".join( c for c in filename if c.isalnum() or c in keepcharacters ).rstrip()


def get_item( list_items, list_item_id ):
    for item in list_items:
        if item[ "id" ] == list_item_id:
            return item


## return an array of strings..  that we prepend each title onto until we hit the root
def parent_paths( list_items, list_item_id ):
    list_parent_paths = []
    
    item = get_item( list_items, list_item_id )
    
    for parent_item in item[ "parents" ]:
        if parent_item[ "isRoot" ]:
            print "root hit"
            list_parent_paths.append( "/" )
        else:
            print "no root hit"
            for parent_path in parent_paths( list_items, parent_item[ "id" ] ):
                print "pp:", parent_path
                list_parent_paths.append( os.path.join( parent_path, item[ "title" ] ) )
                print "cur parent paths:", list_parent_paths
    
    return list_parent_paths


#item1:
#  "title"
#  "id"
#  parents: [
#    { "id"
#      "isRoot" : False
#    },    
#    { "id"
#      "isRoot" : False
#    },
#  ]
#,




def upload_file( drive, path_state_dir, path_local_file ):
    
    if not os.path.isfile( path_local_file ):
        print "ERROR: nonexistant local file:", path_local_file
        sys.exit( 2 )
    
    file_name = os.path.basename( path_local_file )
    
    file_list = drive.ListFile( {'q': "'root' in parents and title = '%s' and trashed=false" % file_name } ).GetList()
    
    if len( file_list ) == 0:
        data_file = drive.CreateFile( { "title": file_name } ) # create new file
        print "created new file:", file_name
        
    elif len( file_list ) == 1: # found existing file
        file_title = file_list[0]['title']
        file_id = file_list[0]['id']
        print "found existing file:", file_title, "id:", file_id
        data_file = drive.CreateFile( { "id": file_id } )
        
    else:
        print "ERROR: too many matching files in root"
        sys.exit( 3 )
    
    data_file.SetContentFile( path_local_file )
    data_file.Upload( { "convert": False } )
    print "uploaded:", file_name



## main() 
if __name__ == '__main__':
    if len( sys.argv ) != 3:
        print "usage: %s <google account name> <path to local file>" % os.path.basename( sys.argv[0] )
        sys.exit( 2 )
    
    google_account = sys.argv[ 1 ]
    path_local_file = sys.argv[ 2 ]
    
    path_config_dir = os.path.join( os.getenv( "HOME" ), ".config" )
    if not os.path.isdir( path_config_dir ):
        os.makedirs( path_config_dir )
    
    path_cache_dir  = os.path.join( os.getenv( "HOME" ), ".cache" )
    if not os.path.isdir( path_cache_dir ):
        os.makedirs( path_cache_dir )
    
    path_state_dir = os.path.join( path_cache_dir, "pydrive_state_%s" % google_account )
    
    path_pydrive_settings_file = os.path.join( path_config_dir,
                                               "pydrive_settings_%s.yaml" % google_account )
    
    path_pydrive_client_secrets_file = os.path.join( path_config_dir,
                                                     "pydrive_client_secrets_%s.json" % google_account )
    
    path_pydrive_credentials_file = os.path.join( path_config_dir,
                                                  "pydrive_credentials_%s.json" % google_account )
    
    if not os.path.isfile( path_pydrive_settings_file ):
        settings_yaml = "client_config_file: %s\nsave_credentials: true\nsave_credentials_backend: file\nsave_credentials_file: %s\n" % ( path_pydrive_client_secrets_file, path_pydrive_credentials_file )
        write_file( path_pydrive_settings_file, settings_yaml )
    
    if not os.path.isfile( path_pydrive_client_secrets_file ):
        print_docs()
    
    gauth = GoogleAuth( path_pydrive_settings_file )
#    print "GA Access Token Expired:", gauth.access_token_expired
    
    ## tkooda : 2014-08-15 : initial auth approval
#    gauth.LocalWebserverAuth()
    gauth.CommandLineAuth()
    
    drive = GoogleDrive( gauth )
    
    upload_file( drive, path_state_dir, path_local_file )



