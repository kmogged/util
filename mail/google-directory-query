#!/usr/bin/python

## tkooda : 2015-04-03 : query Google Directory for contacts via Google Admin SDK


import httplib2

from apiclient import errors
from apiclient.discovery import build
from oauth2client.client import OAuth2WebServerFlow, OAuth2Credentials
import os
import sys
import json


# Check https://developers.google.com/admin-sdk/directory/v1/guides/authorizing for all available scopes
OAUTH_SCOPE = 'https://www.googleapis.com/auth/admin.directory.user'

# Redirect URI for installed apps
REDIRECT_URI = 'urn:ietf:wg:oauth:2.0:oob'

PATH_SECRETS = '~/.config/google-directory-query_secrets.json'
PATH_CREDENTIALS = '~/.cache/google-directory-query_credentials.json'



def get_secrets():
  try:
    with open( os.path.expanduser( PATH_SECRETS ) ) as f:
      data = json.load( f )
      return data['client_id'], data['client_secret']
  except IOError:
    with open( os.path.expanduser( PATH_SECRETS ), "w+" ) as f:
      json.dump( { "client_id": "PUT CLIENT ID HERE",
                   "client_secret": "PUT CLIENT SECRET HERE" }, f )
      print "ERROR: save client_id and client_secret from your project (https://console.developers.google.com/project) that has Admin SDK API access into this file:", PATH_SECRETS
      sys.exit( 3 )


def get_credentials( client_id, client_secret ):
  try:
    with open( os.path.expanduser( PATH_CREDENTIALS ) ) as f:
      data = f.read()
      credentials = OAuth2Credentials.new_from_json( data )
      return credentials
  except IOError:
    credentials = obtain_and_save_auth( client_id, client_secret )


def obtain_and_save_auth( client_id, client_secret ):
  # Run through the OAuth flow and retrieve credentials
  flow = OAuth2WebServerFlow( client_id, client_secret, OAUTH_SCOPE, REDIRECT_URI)
  authorize_url = flow.step1_get_authorize_url()
  
  print 'Go to the following link in your browser: ' + authorize_url
  code = raw_input('Enter verification code: ').strip()
  credentials = flow.step2_exchange(code)
  
  with open( os.path.expanduser( PATH_CREDENTIALS ), "w+" ) as f:
    f.write( credentials.to_json() )
  
  return credentials


if len( sys.argv ) != 2:
  print >>sys.stderr, "usage: %s <query>" % os.path.basename( sys.argv[0] )
  sys.exit( 1 )


client_id, client_secret = get_secrets()

credentials = get_credentials( client_id, client_secret )


# Create an httplib2.Http object and authorize it with our credentials
http = httplib2.Http()
http = credentials.authorize(http)

directory_service = build('admin', 'directory_v1', http=http)

users = []
page_token = None
params = { 'customer': 'my_customer', # REQUIRED
           'viewType': 'domain_public', # hides suspended users
           'query': sys.argv[ 1 ] } # DEFAULT: search givenName, familyName, and email (https://developers.google.com/admin-sdk/directory/v1/guides/search-users)


while True:
  try:
    if page_token:
      params[ 'pageToken' ] = page_token
    current_page = directory_service.users().list( **params ).execute()
    
    users.extend( current_page[ 'users' ] )
    page_token = current_page.get( 'nextPageToken' )
    if not page_token:
      break
  except errors.HttpError as error:
    print 'An error occurred: %s' % error
    break


print # mutt ignores first line
for user in users:
  try:
    print "%s\t%s\t(%s)" % ( user['primaryEmail'], user['name']['fullName'], user['organizations'][0]['title'] )
  except:
    print "%s\t%s" % ( user['primaryEmail'], user['name']['fullName'] )
    pass
#  print user # DEBUG
