#!/usr/bin/python

## pydrive-sync : v0.01 : sync Google Drive to local directory


## Thor Kooda
##  - v0.01 : 2014-08-15 : only rudimentary downloading to local directory


## USAGE:
##  pydrive-sync jdoe@gmail.com /path/to/local/copy/


## REQUIRED:
##  - sudo pip install PyDrive


## NOTES:
##  - https://pypi.python.org/pypi/PyDrive
##  - http://pythonhosted.org/PyDrive/oauth.html


## TODO:
##  - support subdirectories (currently dumps everything in root local dir)
##  - compare cloud json vs. local json (not just absense of local json)
##  - compare local file vs. local json (not just absense of local file)
##  - uploading of new / changed local files to cloud
##  - getopt for:
##    - verbose
##    - debug
##    - who wins "race" (timestamp (default), or exit w/error)
##    - extension mapping?
##  - override MIMETYPE_CONVERSIONS
##  - override MIMETYPE_IGNORE
##  - optional live inotify monitoring of local changes
##    - with periodic cloud polling
##  - decide how to handle files in multiple folders (tags).  -hardlink?




import os
import sys
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
import json
from pydrive.files import FileNotDownloadableError

MIMETYPE_CONVERSIONS = { "application/vnd.google-apps.document": "application/vnd.oasis.opendocument.text",
                         "application/vnd.google-apps.spreadsheet": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                         "application/vnd.google-apps.script": "application/vnd.google-apps.script+json",
                         "application/vnd.google-apps.drawing": "application/pdf", # lossy, use image/svg+xml?
#                         "": "",
                }

MIMETYPE_IGNORE = ( "application/vnd.google-apps.form", )


try:
    DEBUG = int( os.getenv( "DEBUG" ) )
except:
    DEBUG = 0


def do_debug( level, *args ):
    try:
        if level <= DEBUG:
            print >>sys.stderr, "DEBUG: (%d): %s" % ( level, args )
    except:
        pass


def write_file( path_file, data ):
    tmp = path_file + ".tmp"
    num = 0
    try:
        fd = os.open( tmp, os.O_CREAT | os.O_WRONLY | os.O_TRUNC, 0644 )
        num = os.write( fd, data )
        os.close( fd )
        os.rename( tmp, path_file )
    except:
        if DEBUG:
            import traceback
            traceback.print_exc( file=sys.stderr )
            sys.stderr.flush()
            pass
    return num


def safe_filename( filename ):
    ## TODO FIXME: allow lots more non-slash characters (whatever google allows)
    keepcharacters = ( ' ', '.', '_', '(', ')', '{', '}', '[', ']', '-' )
    return "".join( c for c in filename if c.isalnum() or c in keepcharacters ).rstrip()


def print_docs():
    print """
ERROR: missing client secrets file, please follow these steps to create an OAuth2 API key:

  1) Login to the Google Developers Console:  https://console.developers.google.com/
  2) Create or select a project.
  3) In the sidebar on the left, select "APIs & auth".
  4) In the displayed list of APIs, find the "Drive API" and set its status to "ON".
  5) In the sidebar on the left, select "Credentials".
  6) Click the "Create new Client ID" button.
  7) Select "Installed application" for the "APPLICATION TYPE" and "Other" for the "INSTALLED APPLICATION TYPE" and click the "Create Client ID" button.
  8) Click the "Download JSON" button for the new "Client ID" and save the client secrets JSON file as:
       %s

""" % path_pydrive_client_secrets_file
    sys.exit( 9 )



def sync_files( drive ):
## tkooda : 2014-08-15 : TEMP list only root folder
##    for file_list in drive.ListFile():
    for file_list in drive.ListFile( {'q': "'root' in parents"} ):
        do_debug( 5, 'Received %s files from Files.list()' % len( file_list ) )
        for current_file in file_list:
            do_debug( 2, 'title: %s, id: %s' % ( current_file['title'], current_file['id'] ) )
            do_debug( 9, "current_file:", json.dumps( current_file, sort_keys=True, indent=4 ) )
            
            if current_file[ "mimeType" ] in MIMETYPE_IGNORE:
                print "WARNING: ignoring file '%s' with mimeType '%s'" % ( current_file['title'], current_file['mimeType'] )
                continue
            
            
            #### cache any missing state (TODO: detect RELEVANT file content/name/etc changes and update local cache (and local file)) ..
            path_state_dir = os.path.join( PATH_STATE, current_file['id'][ :2 ] )
            if not os.path.isdir( path_state_dir ):
                os.makedirs( path_state_dir )
            
            path_state_file = os.path.join( path_state_dir, current_file['id'] )
            if not os.path.isfile( path_state_file ):
                num = write_file( path_state_file, json.dumps( current_file, sort_keys=True, indent=4 ) )
                do_debug( 5, "wrote:", num )
            
            
            #### create any locally missing directory ..
            if current_file[ "mimeType" ] == "application/vnd.google-apps.folder":
                path_local_dir = os.path.join( PATH_SYNC, current_file['title'] )
                if not os.path.isdir( path_local_dir ):
                    os.makedirs( path_local_dir )
                continue
            
            
            #### download any locally missing file ..
            path_local_dir = PATH_SYNC ## TODO FIXME LATER: support creating files in sub-directories
            if not os.path.isdir( path_local_dir ):
                os.makedirs( path_local_dir )
            
            path_local_file = os.path.join( path_local_dir, safe_filename( current_file['title'] ) )
            if os.path.isfile( path_local_file ):
                do_debug( 4, "SKIPPING EXISTING LOCAL FILE:", current_file['title'] )
                continue
            
            file_fetch = drive.CreateFile( { 'id': current_file[ 'id' ] } )
            print "Downloading (%s): '%s' to '%s' .." % ( file_fetch['id'], file_fetch['title'], path_local_file )
            fetched = False
            for k, v in MIMETYPE_CONVERSIONS.iteritems():
                if file_fetch[ 'mimeType' ] == k:
                    file_fetch.GetContentFile( path_local_file, mimetype = v )
                    fetched = True
                    break
            
            if not fetched: # unknown file type, try w/out specifying a mimeType
                try:
                    file_fetch.GetContentFile( path_local_file )
                except FileNotDownloadableError:
                    print "ERROR: MUST SPECIFY ONE OF THESE mimeType FOR FILE: '%s' (%s) = %s :" % ( current_file['title'], current_file['id'], current_file['mimeType'] )
                    for mt in current_file['exportLinks']:
                        print "mimeType:", mt
                    sys.exit( 3 )
            




## main() 
if __name__ == '__main__':
    if len( sys.argv ) != 3:
        print "usage: %s <google account name> <path to sync directory>" % os.path.basename( sys.argv[0] )
        sys.exit( 2 )
    
    GOOGLE_ACCOUNT = sys.argv[ 1 ]
    PATH_SYNC = sys.argv[ 2 ]
    PATH_STATE = os.path.join( os.getenv( "HOME" ),
                               ".cache/pydrive_state_%s" % GOOGLE_ACCOUNT )
    
    path_pydrive_settings_file = os.path.join( os.getenv( "HOME" ),
                                               ".config/pydrive_settings_%s.yaml" % GOOGLE_ACCOUNT )
    path_pydrive_client_secrets_file = os.path.join( os.getenv( "HOME" ),
                                                     ".config/pydrive_client_secrets_%s.json" % GOOGLE_ACCOUNT )
    path_pydrive_credentials_file = os.path.join( os.getenv( "HOME" ),
                                                  ".config/pydrive_credentials_%s.json" % GOOGLE_ACCOUNT )
    
    if not os.path.isfile( path_pydrive_settings_file ):
        settings_yaml = "client_config_file: %s\nsave_credentials: true\nsave_credentials_backend: file\nsave_credentials_file: %s\n" % ( path_pydrive_client_secrets_file, path_pydrive_credentials_file )
        write_file( path_pydrive_settings_file, settings_yaml )
    
    if not os.path.isfile( path_pydrive_client_secrets_file ):
        print_docs()
    
    gauth = GoogleAuth( path_pydrive_settings_file )
#    print "GA Access Token Expired:", gauth.access_token_expired
    
    ## tkooda : 2014-08-15 : initial auth approval
#    gauth.LocalWebserverAuth()
    gauth.CommandLineAuth()
    
    drive = GoogleDrive( gauth )
    
    sync_files( drive )



