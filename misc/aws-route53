#!/usr/bin/python

## 2015-04-05 : tkooda : simple script to interact with AWS

## TODO:
##  - check (and WARN) for existing conflicting record before commiting any changes (e.g. subdomain already has a matching record; or WARN: dest_host/ip is already used)


from __future__ import print_function
import os
import sys
import argparse
import re

os.environ[ "BOTO_CONFIG" ] = os.path.expanduser( "~/.aws/config" )

#import boto.route53
import boto

import pprint
pp = pprint.PrettyPrinter( indent=4 )


def debug( level, *objs ):
    try:
        if level <= int( os.getenv( "DEBUG" ) ):
            print( "DEBUG(%d):" % level, objs, file=sys.stderr )
            sys.stderr.flush()
    except:
        pass


RR_TYPES = [ "A", "AAAA", "CNAME", "MX", "PTR", "SPF", "SRV", "TXT" ] # removed NS, SOA capability

# parse args..
parser = argparse.ArgumentParser( description='Use boto to communicate with AWS Route53.' )
parser.add_argument( '--profile', required=True, action='store', help='profile to use from ~/.aws/config' )
#parser.add_argument( '--dry-run', default=False, action='store_true', help="Don't actually do anything" )

parser.add_argument( '--list-zones', default=False, action='store_true', help="List all hosted zones" )
parser.add_argument( '--zone', action='store', help="Specify hosted zone by name" )
parser.add_argument( '--type', action='store', choices=RR_TYPES, help="Specify resource record type" )
parser.add_argument( '--ttl', action='store', type=int, default=3600, help="Specify resource record TTL" )

parser.add_argument( '--add', action='store', nargs=2, help="Add a new resource record" )
parser.add_argument( '--delete', action='store', nargs=2, help="Delete an existing resource record" )

#parser.add_argument( '--include', action='append', help='BACKUP: includes (after excludes; imples --exclude "**" )')
#parser.add_argument( 'dir_to_backup', action='store', nargs='+' )
args = vars( parser.parse_args() )
debug( 0, "ARGS:", args )


if args.get( "add" ) and args.get( "delete" ):
    print( "ERROR: cannot Add and Delete at the same time", file=sys.stderr )
    sys.exit( 2 )


conn = boto.connect_route53( profile_name = args["profile"] )

if args[ "list_zones" ]:
    for zone in conn.get_all_hosted_zones()[ "ListHostedZonesResponse" ][ "HostedZones" ]:
        print( zone[ "Name" ] )
    sys.exit( 0 )

elif args[ "zone" ]:
    zone_name = args[ "zone" ].rstrip( "." )
    zone_id = conn.get_hosted_zone_by_name( zone_name )[ "GetHostedZoneResponse" ][ "HostedZone" ][ "Id" ].split( "/" )[2]

    if args.get( "add" ):
        if not args[ "type" ]:
            print( "ERROR: must specify record type", file=sys.stderr )
            sys.exit( 2 )
        
        host = args[ "add" ][ 0 ].strip( "." )
        dest = args[ "add" ][ 1 ]
        
        if not host.endswith( zone_name ):
            host = host + "." + zone_name
        
        if args[ "type" ] in [ "A", "PTR", "" ]:
            if not re.match( "^\d\.\d\.\d\.\d$", dest ):
                print( "ERROR: invalid IP address:", dest, file=sys.stderr )
                sys.exit( 2 )
        
        debug( 1, "add:", host, args[ "type" ], dest, args[ "ttl" ] )
        
        changes = boto.route53.record.ResourceRecordSets( connection = conn,
                                                          hosted_zone_id = zone_id )
        change = changes.add_change( "CREATE", host, args[ "type" ], ttl=args[ "ttl" ] )
        change.add_value( dest )
        result = changes.commit()
        print( result, file=sys.stderr )
        
        
    elif args.get( "delete" ):
        if not args[ "type" ]:
            print( "ERROR: must specify record type", file=sys.stderr )
            sys.exit( 2 )
        
        host = args[ "delete" ][ 0 ].strip( "." )
        dest = args[ "delete" ][ 1 ]
        
        if not host.endswith( zone_name ):
            host = host + "." + zone_name
        
        if args[ "type" ] in [ "A", "PTR", "" ]:
            if not re.match( "^\d\.\d\.\d\.\d$", dest ):
                print( "ERROR: invalid IP address:", dest, file=sys.stderr )
                sys.exit( 2 )
        
        debug( 1, "delete:", host, args[ "type" ], dest, args[ "ttl" ] )
        
        changes = boto.route53.record.ResourceRecordSets( connection = conn,
                                                          hosted_zone_id = zone_id )
        change = changes.add_change( "DELETE", host, args[ "type" ], ttl = args[ "ttl" ] )
        change.add_value( dest )
        result = changes.commit()
        print( result, file=sys.stderr )

    else: # just filter output based on type
        for rr_set in conn.get_all_rrsets( zone_id ):
            if rr_set.type in [ "SOA" ]:
                continue
            if args[ "type" ] and rr_set.type != args[ "type" ]:
                continue
#            print( "%s\t%s\t%s" % ( rr_set.name, rr_set.type, rr_set.to_print() ) )
            for rr in rr_set.resource_records:
                print( "%s\t%s\t%s\t%s" % ( rr_set.name, rr_set.type, rr, rr_set.ttl ) )
#            print()
        
        
